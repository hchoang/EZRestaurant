/*
 * SearchOrder.java
 * Create the Search Order dialog.
 * (Used GUI BUILDER to build.)
 *
 * Created on Dec 17, 2011, 1:40:16 AM
 */
package restaurant.GUI.component.inputFrame;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.*;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.table.*;
import restaurant.GUI.component.OldOrderDetails;
import restaurant.controller.RestaurantController;
import restaurant.model.*;
import restaurant.model.exception.GeneralException;
import restaurant.model.facade.RestaurantEngine;
import restaurant.model.facade.RestaurantModel;

/**
 *
 * @author Luan Nguyen Thanh
 */
public class SearchOrder extends JDialog implements MouseListener {

    /** The Controller */
    private RestaurantController controller;
    /** Components */
    private DefaultTableModel m;
    private Order selectedOrder;
    private ArrayList<Order> orders;
    private Manager user;
    /** Pagination */
    private int start, end;
    private long time;
    /** Data fields */
    private String keyword;
    private Calendar endDate, startDate;
    private Calendar now;
    private String oldPage;
    private static ResourceBundle rb;

    /** Creates new form SearchOrder for Test */
    public SearchOrder(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        rb = RestaurantEngine.translate;
        initComponents();
        setAlwaysOnTop(true);
    }

    /**
     * Create new dialog for main using
     * 
     * @param controller - parse the controller in.
     */
    public SearchOrder(RestaurantController controller) {
        this.controller = controller;
        rb = RestaurantEngine.translate;
        initComponents();
        init();
        setAlwaysOnTop(true);
    }

    /**
     * Initiate the data fields and important components handling.
     * ( Initiate the Swing components will be handled by initComponents() )
     */
    private void init() {
        RestaurantModel model = controller.getEZmodel();
        user = (Manager) model.getCurrent();

        selectedOrder = null;

        start = 0;
        end = 0;

        now = Calendar.getInstance();

        this.setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        searchPanel = new javax.swing.JPanel();
        searchLbl = new javax.swing.JLabel();
        searchTxt = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        startDateCheck = new javax.swing.JCheckBox();
        endDateCheck = new javax.swing.JCheckBox();
        startDayChooser = new com.toedter.calendar.JDateChooser();
        endDayChooser = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        pagePanel = new javax.swing.JPanel();
        firstBtn = new javax.swing.JButton();
        previousBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        currentPage = new javax.swing.JFormattedTextField();
        slashLbl = new javax.swing.JLabel();
        totalPage = new javax.swing.JLabel();
        nextBtn = new javax.swing.JButton();
        lastBtn = new javax.swing.JButton();
        buttonPanel1 = new javax.swing.JPanel();
        okBtn = new javax.swing.JButton();
        searchTime = new javax.swing.JLabel();
        orderInfoPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dateTxtPane = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        idTxtPane = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        billTxtPane = new javax.swing.JTextPane();
        jLabel5 = new javax.swing.JLabel();
        detailBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        managerNotePane = new javax.swing.JEditorPane();
        applyBtn = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Search old order");
        setIconImage(null);
        setResizable(false);

        searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Search for order"));

        searchLbl.setText(rb.getString("Search for"));

        searchTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTxtActionPerformed(evt);
            }
        });
        searchTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTxtKeyReleased(evt);
            }
        });

        searchBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restaurant/GUI/images/Search.png"))); // NOI18N
        searchBtn.setText(rb.getString("Search"));
        searchBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        startDateCheck.setText(rb.getString("Start date"));
        startDateCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDateCheckActionPerformed(evt);
            }
        });

        endDateCheck.setText(rb.getString("End date"));
        endDateCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endDateCheckActionPerformed(evt);
            }
        });

        startDayChooser.setEnabled(false);
        startDayChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                startDayChooserPropertyChange(evt);
            }
        });

        endDayChooser.setEnabled(false);
        endDayChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                endDayChooserPropertyChange(evt);
            }
        });

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                rb.getString("Order ID"),rb.getString("Date")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(resultTable);

        firstBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restaurant/GUI/images/Nav_LL.png"))); // NOI18N
        firstBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstBtnActionPerformed(evt);
            }
        });
        pagePanel.add(firstBtn);

        previousBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restaurant/GUI/images/Nav_L.png"))); // NOI18N
        previousBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousBtnActionPerformed(evt);
            }
        });
        pagePanel.add(previousBtn);

        jLabel1.setText(rb.getString("Page"));
        pagePanel.add(jLabel1);

        currentPage.setColumns(5);
        currentPage.setFormatterFactory(null);
        currentPage.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        currentPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentPageActionPerformed(evt);
            }
        });
        pagePanel.add(currentPage);

        slashLbl.setText("/");
        pagePanel.add(slashLbl);

        totalPage.setText("1");
        pagePanel.add(totalPage);

        nextBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restaurant/GUI/images/Nav_R.png"))); // NOI18N
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });
        pagePanel.add(nextBtn);

        lastBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restaurant/GUI/images/Nav_RR.png"))); // NOI18N
        lastBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastBtnActionPerformed(evt);
            }
        });
        pagePanel.add(lastBtn);

        okBtn.setText(rb.getString("OK"));
        okBtn.setMaximumSize(new java.awt.Dimension(60, 23));
        okBtn.setMinimumSize(new java.awt.Dimension(60, 23));
        okBtn.setPreferredSize(new java.awt.Dimension(60, 23));
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });
        buttonPanel1.add(okBtn);

        searchTime.setText(" ");

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                    .addComponent(buttonPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                    .addComponent(pagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(searchLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                                .addComponent(searchTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchBtn))
                            .addGroup(searchPanelLayout.createSequentialGroup()
                                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(endDateCheck)
                                    .addComponent(startDateCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(endDayChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(startDayChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE))))
                    .addComponent(searchTime))
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addGap(6, 6, 6)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(startDateCheck, 0, 0, Short.MAX_VALUE)
                    .addComponent(startDayChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(endDateCheck, 0, 0, Short.MAX_VALUE)
                    .addComponent(endDayChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(searchTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        orderInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Order's information"));

        jLabel2.setText(rb.getString("ID"));

        jLabel3.setText(rb.getString("Date"));

        jLabel4.setText(rb.getString("Bill"));

        dateTxtPane.setBackground(new java.awt.Color(222, 225, 229));
        dateTxtPane.setContentType("text/html");
        dateTxtPane.setEditable(false);
        dateTxtPane.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane2.setViewportView(dateTxtPane);

        idTxtPane.setBackground(new java.awt.Color(222, 225, 229));
        idTxtPane.setContentType("text/html");
        idTxtPane.setEditable(false);
        idTxtPane.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane3.setViewportView(idTxtPane);

        billTxtPane.setBackground(new java.awt.Color(222, 225, 229));
        billTxtPane.setContentType("text/html");
        billTxtPane.setEditable(false);
        billTxtPane.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane4.setViewportView(billTxtPane);

        jLabel5.setText(rb.getString("VND"));

        detailBtn.setText(rb.getString("Details"));
        detailBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailBtnActionPerformed(evt);
            }
        });

        jLabel6.setText(rb.getString("Manager's note"));

        managerNotePane.setContentType("text/html");
        jScrollPane5.setViewportView(managerNotePane);

        applyBtn.setText(rb.getString("Apply"));
        applyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout orderInfoPanelLayout = new javax.swing.GroupLayout(orderInfoPanel);
        orderInfoPanel.setLayout(orderInfoPanelLayout);
        orderInfoPanelLayout.setHorizontalGroup(
            orderInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(orderInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                    .addGroup(orderInfoPanelLayout.createSequentialGroup()
                        .addGroup(orderInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(orderInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(orderInfoPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(orderInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(orderInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(detailBtn)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel6)
                    .addComponent(applyBtn, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        orderInfoPanelLayout.setVerticalGroup(
            orderInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(orderInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                .addGap(17, 17, 17)
                .addGroup(orderInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(detailBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(applyBtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(orderInfoPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void currentPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentPageActionPerformed
        String page = currentPage.getText();
        if (Pattern.matches("[0-9]+", page)) {
            int pageNum = Integer.parseInt(page);
            int totalNum = Integer.parseInt(totalPage.getText());
            if (pageNum <= totalNum && pageNum > 0) {
                oldPage = pageNum + "";
                start = (10 * pageNum) - 10;
                if (pageNum == totalNum) {
                    end = orders.size() - 1;
                } else {
                    end = start + 10;
                }
                int numRow = m.getRowCount();
                for (int i = 0; i < numRow; i++) {
                    m.removeRow(0);
                }
                for (int i = start; i < end; i++) {
                    Order order = orders.get(i);
                    int day = order.getTimeStamp().get(GregorianCalendar.DAY_OF_MONTH);
                    int month = order.getTimeStamp().get(GregorianCalendar.MONTH) + 1;
                    int year = order.getTimeStamp().get(GregorianCalendar.YEAR);
                    String date = day + "/" + month + "/" + year;
                    Vector<String> row = new Vector<String>();
                    row.addElement(user.searchKeyword(order.getId(), keyword));
                    row.addElement(user.searchKeyword(date, keyword));
                    m.addRow(row);
                }
            } else {
                setAlwaysOnTop(false);
                JOptionPane.showMessageDialog(null, rb.getString("The page number is out of range"), rb.getString("Error!"),
                        JOptionPane.ERROR_MESSAGE);
                setAlwaysOnTop(true);
                currentPage.setText(oldPage);
            }
        } else {
            setAlwaysOnTop(false);
            JOptionPane.showMessageDialog(null, rb.getString("The page number should be number"), rb.getString("Error!"),
                    JOptionPane.ERROR_MESSAGE);
            setAlwaysOnTop(true);
            currentPage.setText(oldPage);
        }
    }//GEN-LAST:event_currentPageActionPerformed

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_okBtnActionPerformed

    private void searchTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTxtActionPerformed
        time = System.currentTimeMillis();

        RestaurantModel model = controller.getEZmodel();

        orders = new ArrayList<Order>();
        resultTable.addMouseListener(this);
        keyword = searchTxt.getText();

        idTxtPane.setText("");
        dateTxtPane.setText("");
        billTxtPane.setText("");
        managerNotePane.setText("");

        try {
            boolean hasStart = startDateCheck.isSelected();
            boolean hasEnd = endDateCheck.isSelected();

            if (hasStart && startDate == null) {
                throw new GeneralException(rb.getString("You must define a start date"));
            }
            if (hasEnd && endDate == null) {
                throw new GeneralException(rb.getString("You must define an end date"));
            }

            if (!hasEnd && !hasStart) {
                orders = model.searchOrder(keyword, null, null);
            } else {
                // Use search function base on Date
                if (hasStart) {
                    if (hasEnd) {
                        orders = model.searchOrder(keyword,
                                (GregorianCalendar) startDate,
                                (GregorianCalendar) endDate);
                    } else {
                        orders = model.searchOrder(keyword,
                                (GregorianCalendar) startDate, null);
                    }
                } else {
                    if (hasEnd) {
                        orders = model.searchOrder(keyword, null,
                                (GregorianCalendar) endDate);
                    } else {
                        orders = model.searchOrder(keyword, null, null);
                    }
                }
            }

            // Do pagination
            start = 0;
            end = 0;
            if (orders.size() >= 10) {
                end += 10;
            } else {
                end = orders.size();
            }

            m = (DefaultTableModel) resultTable.getModel();

            int numRow = m.getRowCount();
            for (int i = 0; i < numRow; i++) {
                m.removeRow(0);
            }

            for (int i = start; i < end; i++) {
                Order order = orders.get(i);
                int day = order.getTimeStamp().get(GregorianCalendar.DAY_OF_MONTH);
                int month = order.getTimeStamp().get(GregorianCalendar.MONTH) + 1;

                int year = order.getTimeStamp().get(GregorianCalendar.YEAR);
                String date = day + "/" + month + "/" + year;
                Vector<String> row = new Vector<String>();
                row.addElement(user.searchKeyword(order.getId(), keyword));
                row.addElement(user.searchKeyword(date, keyword));
                m.addRow(row);
            }

            currentPage.setText("1");
            oldPage = currentPage.getText();
            totalPage.setText("" + ((orders.size() - 1) / 10 + 1));

            time = System.currentTimeMillis() - time;

            setSearchTime();
        } catch (Exception ex) {
            setAlwaysOnTop(false);
            JOptionPane.showMessageDialog(null, ex.getMessage(), rb.getString("Error!"),
                    JOptionPane.ERROR_MESSAGE);
            setAlwaysOnTop(true);
        }
    }//GEN-LAST:event_searchTxtActionPerformed

    private void startDayChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_startDayChooserPropertyChange
        startDate = startDayChooser.getCalendar();
    }//GEN-LAST:event_startDayChooserPropertyChange

    private void endDayChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_endDayChooserPropertyChange
        endDate = endDayChooser.getCalendar();
    }//GEN-LAST:event_endDayChooserPropertyChange

    private void applyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyBtnActionPerformed
        RestaurantModel model = controller.getEZmodel();
        try {
            selectedOrder.setManagerNote(managerNotePane.getText());
            model.saveOldOrder(selectedOrder);
        } catch (Exception ex) {
            setAlwaysOnTop(false);
            JOptionPane.showMessageDialog(null, ex.getMessage(), rb.getString("Error!"),
                    JOptionPane.ERROR_MESSAGE);
            setAlwaysOnTop(true);
        }
    }//GEN-LAST:event_applyBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        this.searchTxtActionPerformed(evt);
    }//GEN-LAST:event_searchBtnActionPerformed

    private void startDateCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDateCheckActionPerformed
        startDayChooser.setEnabled(startDateCheck.isSelected());
    }//GEN-LAST:event_startDateCheckActionPerformed

    private void endDateCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endDateCheckActionPerformed
        endDayChooser.setEnabled(endDateCheck.isSelected());
    }//GEN-LAST:event_endDateCheckActionPerformed

    private void detailBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailBtnActionPerformed
        this.setAlwaysOnTop(false);
        if (selectedOrder != null) {
            OldOrderDetails detail = new OldOrderDetails(user, selectedOrder, keyword);
            detail.setVisible(true);
            detail.setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_detailBtnActionPerformed

    private void previousBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousBtnActionPerformed
        if (end % 10 != 0) {
            if (end >= 10) {
                end -= end % 10;
                start -= 10;
            }
        } else {
            if (end != 10) {
                end -= 10;
                start -= 10;
            }
        }
        int numRow = m.getRowCount();
        for (int i = 0; i < numRow; i++) {
            m.removeRow(0);
        }
        for (int i = start; i < end; i++) {
            Order order = orders.get(i);
            int day = order.getTimeStamp().get(GregorianCalendar.DAY_OF_MONTH);
            int month = order.getTimeStamp().get(GregorianCalendar.MONTH) + 1;
            int year = order.getTimeStamp().get(GregorianCalendar.YEAR);
            String date = day + "/" + month + "/" + year;
            Vector<String> row = new Vector<String>();
            row.addElement(user.searchKeyword(order.getId(), keyword));
            row.addElement(user.searchKeyword(date, keyword));
            m.addRow(row);
        }

        currentPage.setText("" + (start / 10 + 1));
        oldPage = currentPage.getText();
    }//GEN-LAST:event_previousBtnActionPerformed

    private void firstBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstBtnActionPerformed
        start = 0;
        if (orders.size() < 10) {
            end = orders.size();
        } else {
            end = 10;
        }
        int numRow = m.getRowCount();
        for (int i = 0; i < numRow; i++) {
            m.removeRow(0);
        }
        for (int i = start; i < end; i++) {
            Order order = orders.get(i);
            int day = order.getTimeStamp().get(GregorianCalendar.DAY_OF_MONTH);
            int month = order.getTimeStamp().get(GregorianCalendar.MONTH);
            int year = order.getTimeStamp().get(GregorianCalendar.YEAR);
            String date = day + "/" + (month + 1) + "/" + year;
            Vector<String> row = new Vector<String>();
            row.addElement(user.searchKeyword(order.getId(), keyword));
            row.addElement(user.searchKeyword(date, keyword));
            m.addRow(row);
        }
        currentPage.setText("" + (start / 10 + 1));
        oldPage = currentPage.getText();
    }//GEN-LAST:event_firstBtnActionPerformed

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        if (end < orders.size() - 10) {
            end += 10;
            start += 10;
        } else {
            if (end < orders.size()) {
                end = orders.size();
                start += 10;
            }
        }
        int numRow = m.getRowCount();
        for (int i = 0; i < numRow; i++) {
            m.removeRow(0);
        }
        for (int i = start; i < end; i++) {
            Order order = orders.get(i);
            int day = order.getTimeStamp().get(GregorianCalendar.DAY_OF_MONTH);
            int month = order.getTimeStamp().get(GregorianCalendar.MONTH);
            int year = order.getTimeStamp().get(GregorianCalendar.YEAR);
            String date = day + "/" + (month + 1) + "/" + year;
            Vector<String> row = new Vector<String>();
            row.addElement(user.searchKeyword(order.getId(), keyword));
            row.addElement(user.searchKeyword(date, keyword));
            m.addRow(row);
        }
        currentPage.setText("" + (start / 10 + 1));
        oldPage = currentPage.getText();
    }//GEN-LAST:event_nextBtnActionPerformed

    private void lastBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastBtnActionPerformed
        end = orders.size();
        if (orders.size() % 10 == 0) {
            start = end - 10;
        } else {
            start = end - (orders.size() % 10);
        }
        int numRow = m.getRowCount();
        for (int i = 0; i < numRow; i++) {
            m.removeRow(0);
        }
        for (int i = start; i < end; i++) {
            Order order = orders.get(i);
            int day = order.getTimeStamp().get(GregorianCalendar.DAY_OF_MONTH);
            int month = order.getTimeStamp().get(GregorianCalendar.MONTH);
            int year = order.getTimeStamp().get(GregorianCalendar.YEAR);
            String date = day + "/" + (month + 1) + "/" + year;
            Vector<String> row = new Vector<String>();
            row.addElement(user.searchKeyword(order.getId(), keyword));
            row.addElement(user.searchKeyword(date, keyword));
            m.addRow(row);
        }
        currentPage.setText("" + (start / 10 + 1));
        oldPage = currentPage.getText();
    }//GEN-LAST:event_lastBtnActionPerformed

    private void searchTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTxtKeyReleased
        this.searchTxtActionPerformed(null);
    }//GEN-LAST:event_searchTxtKeyReleased

    private void setSearchTime() {
        double result = time / 1000.0;

        String s = rb.getString("Found ") + orders.size()
                + rb.getString(" results in ") + result + rb.getString(" seconds");
        searchTime.setText(s);
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyBtn;
    private javax.swing.JTextPane billTxtPane;
    private javax.swing.JPanel buttonPanel1;
    private javax.swing.JFormattedTextField currentPage;
    private javax.swing.JTextPane dateTxtPane;
    private javax.swing.JButton detailBtn;
    private javax.swing.JCheckBox endDateCheck;
    private com.toedter.calendar.JDateChooser endDayChooser;
    private javax.swing.JButton firstBtn;
    private javax.swing.JTextPane idTxtPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton lastBtn;
    private javax.swing.JEditorPane managerNotePane;
    private javax.swing.JButton nextBtn;
    private javax.swing.JButton okBtn;
    private javax.swing.JPanel orderInfoPanel;
    private javax.swing.JPanel pagePanel;
    private javax.swing.JButton previousBtn;
    private javax.swing.JTable resultTable;
    private javax.swing.JButton searchBtn;
    private javax.swing.JLabel searchLbl;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JLabel searchTime;
    private javax.swing.JTextField searchTxt;
    private javax.swing.JLabel slashLbl;
    private javax.swing.JCheckBox startDateCheck;
    private com.toedter.calendar.JDateChooser startDayChooser;
    private javax.swing.JLabel totalPage;
    // End of variables declaration//GEN-END:variables

    // Handling the mouse events
    public void mouseClicked(MouseEvent e) {
        if (e.getClickCount() == 2) {
            if (resultTable.getSelectedRow() >= 0) {
                RestaurantModel model = controller.getEZmodel();

                String orderID = (String) resultTable.getModel().
                        getValueAt(resultTable.getSelectedRow(), 0);

                try {
                    selectedOrder = model.getOrder(orderID);
                } catch (Exception ex) {
                    setAlwaysOnTop(false);
                    JOptionPane.showMessageDialog(null, ex.getMessage(),
                            rb.getString("Error!"), JOptionPane.ERROR_MESSAGE);
                    setAlwaysOnTop(true);
                }

                idTxtPane.setText(user.searchKeyword(selectedOrder.getId(), keyword));

                int day = selectedOrder.getTimeStamp().
                        get(GregorianCalendar.DAY_OF_MONTH);
                int month = selectedOrder.getTimeStamp().
                        get(GregorianCalendar.MONTH);
                int year = selectedOrder.getTimeStamp().
                        get(GregorianCalendar.YEAR);
                String date = user.searchKeyword(day + "", keyword) + "/"
                        + user.searchKeyword(month + "", keyword) + "/"
                        + user.searchKeyword(year + "", keyword);
                dateTxtPane.setText(date);

                DecimalFormat df = new DecimalFormat();
                DecimalFormatSymbols dfs = new DecimalFormatSymbols();
                dfs.setGroupingSeparator(',');
                df.setDecimalFormatSymbols(dfs);
                String priceString = df.format(selectedOrder.calculateTotal());
                billTxtPane.setText(user.searchKeyword(priceString, keyword));

                try {
                    managerNotePane.setText(selectedOrder.getManagerNote());
                } catch (GeneralException ex) {
                    setAlwaysOnTop(false);
                    JOptionPane.showMessageDialog(null, ex.getMessage(),
                            rb.getString("Error!"), JOptionPane.ERROR_MESSAGE);
                    setAlwaysOnTop(true);
                }
            } else {
                idTxtPane.setText("");
                dateTxtPane.setText("");
                billTxtPane.setText("");
                managerNotePane.setText("");
            }
        }
    }

    public void mousePressed(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void mouseReleased(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void mouseEntered(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void mouseExited(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet.");
    }
}
